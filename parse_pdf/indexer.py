# ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
# ‚†ø‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ü‚†õ‚†õ‚†õ‚†õ‚†õ
# ‚£∂‚£¶‚£§‚£§‚£§‚£§‚£§‚£§‚£¨‚£≠‚£≠‚£ç‚£â‚°ô‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚£ã‚£©‚£≠‚£•‚£§‚£¥‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂
# ‚£Ü‚†Ä‚†Ä‚†Ä‚¢°‚†Å‚†Ä‚°Ä‚†Ä‚¢∏‚†ü‚†ª‚£Ø‚†ô‚†õ‚†∑‚£∂‚£¨‚°ô‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚¢â‚£•‚£∂‚°ü‚†ª‚£ô‚°â‚†Ä‚¢∞‚°Ü‚†Ä‚†Ä‚£°‚†Ä‚£ß‚†Ä‚†Ä‚†Ä‚¢®
# ‚†ª‚£¶‚†Ä‚†Ä‚†à‚£á‚£Ä‚£ß‚£¥‚£ø‚£∂‚£∂‚£ø‚£∑‚†Ä‚¢Ä‚°á‚†â‚†ª‚¢∂‚£å‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£°‚°∂‚†ü‚†â‚†Ä‚¢£‚†Ä‚£ø‚†∑‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°∑‚¢Ä‚†á‚†Ä‚†Ä‚¢†‚£ø
# ‚£¶‚°à‚¢ß‚°Ä‚†Ä‚†ò‚¢Æ‚°ô‚†õ‚†â‚†Ä‚†Ñ‚†ô‚¢ø‚£Ä‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚£Ñ‚†â‚†ì‚†í‚†ö‚†ã‚¢Ä‚°†‚†ã‚†Ä‚¢Ä‚£¥‚£è‚£ø
# ‚£ø‚£ø‚£ø‚£õ‚£¶‚£Ä‚†Ä‚†ô‚†ì‚†¶‚†§‚£§‚†î‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£§‚£§‚£§‚£§‚£§‚£Ä‚£Ä‚£Ä‚£Ä‚¢ô‚¢ì‚£í‚°í‚†ö‚†ã‚¢†‚£§‚¢∂‚£ü‚£Ω‚£ø‚£ø
# ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ä‚†Ä‚£¥‚£ø‚£∑‚£∂‚£∂‚£∂‚£æ‚°ñ‚¢∞‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£æ‚£ø‚£ø‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
# ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
# ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
# ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
     
#                           üîí Licensed under the GNU GPLv3
#                    üåê https://www.gnu.org/licenses/agpl-3.0.html
# ¬†¬†¬†¬†¬†¬†¬†¬†                   https://t.me/amorescam

import re
import json
import numpy as np
from parse_pdf.PorterStemmer import PorterStemmer

with open('keywords.json', 'r') as f:
    dictionary = json.load(f)
    f.close()


def tokenize(text):
    clean_string = re.sub('[^a-z0-9-+# ]', ' ', text.lower().decode())
    return clean_string.split()


def stemming(self, tokens):
    stemmed_tokens = []
    stemmer = PorterStemmer.PorterStemmer()
    return [stemmer.stem(t, 0, len(t) - 1) for t in tokens]


def index(tokens):
    lst = np.zeros(len(dictionary))

    for t in tokens:
        if t in dictionary:
            lst[dictionary.index(t)] = 1
    return lst


def normalize(d):
    sum_vals = sum(d.values())
    for k, v in d.items():
        d[k] = v * 1.0 / sum_vals
    return d


def return_index(file_path='parse_pdf/outputtext.txt'):
    with open(file_path, 'rb') as f:
        text = f.read()
        f.close()

    return tokenize(text)


if __name__ == "__main__":
    file_path = 'parse_pdf/outputtext.txt'
    return_index(file_path)
